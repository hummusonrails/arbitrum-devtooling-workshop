{"abi":[{"type":"function","name":"addFromMsgValue","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"addNumber","inputs":[{"name":"newNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getNumber","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"increment","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"mulNumber","inputs":[{"name":"newNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"number","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setNumber","inputs":[{"name":"newNumber","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x608080604052346015576101f3908161001b8239f35b600080fdfe608060405260048036101561001357600080fd5b600090813560e01c80633fb5c1cb146101925780634d4f58d1146101395780638381f58a14610092578063cd87baff14610121578063d09de08a146100b2578063f2c9ecd8146100925763fce680231461006c57600080fd5b3461008e57602060031936011261008e57610089903582546101aa565b815580f35b5080fd5b82346100af57806003193601126100af5760209054604051908152f35b80fd5b5090346100af57806003193601126100af5780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146100f557600101815580f35b5060116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82806003193601126100af57610089815434906101aa565b503461008e57602060031936011261008e5780359082548281029281840414901517156101665750815580f35b8260116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b503461008e57602060031936011261008e5735815580f35b919082018092116101b757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000819000a","sourceMap":"219:1195:0:-:0;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x608060405260048036101561001357600080fd5b600090813560e01c80633fb5c1cb146101925780634d4f58d1146101395780638381f58a14610092578063cd87baff14610121578063d09de08a146100b2578063f2c9ecd8146100925763fce680231461006c57600080fd5b3461008e57602060031936011261008e57610089903582546101aa565b815580f35b5080fd5b82346100af57806003193601126100af5760209054604051908152f35b80fd5b5090346100af57806003193601126100af5780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146100f557600101815580f35b5060116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b82806003193601126100af57610089815434906101aa565b503461008e57602060031936011261008e5780359082548281029281840414901517156101665750815580f35b8260116024927f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b503461008e57602060031936011261008e5735815580f35b919082018092116101b757565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea164736f6c6343000819000a","sourceMap":"219:1195:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;219:1195:0;;;;;849:18;219:1195;;;;849:18;:::i;:::-;219:1195;;;;;;;;;;;;;;-1:-1:-1;;219:1195:0;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;219:1195:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;219:1195:0;;;;;1192:18;219:1195;;1201:9;1192:18;;:::i;219:1195::-;;;;;;-1:-1:-1;;219:1195:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;219:1195:0;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;","linkReferences":{}},"methodIdentifiers":{"addFromMsgValue()":"cd87baff","addNumber(uint256)":"fce68023","getNumber()":"f2c9ecd8","increment()":"d09de08a","mulNumber(uint256)":"4d4f58d1","number()":"8381f58a","setNumber(uint256)":"3fb5c1cb"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"addFromMsgValue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"addNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"mulNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"number\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNumber\",\"type\":\"uint256\"}],\"name\":\"setNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A simple counter contract with various arithmetic operations This is the Solidity equivalent of the Stylus counter contract\",\"kind\":\"dev\",\"methods\":{\"addFromMsgValue()\":{\"details\":\"Adds the msg.value to the current number This function is payable and adds the wei sent to the number\"},\"addNumber(uint256)\":{\"details\":\"Adds a new value to the current number\",\"params\":{\"newNumber\":\"The value to add\"}},\"getNumber()\":{\"details\":\"Returns the current value of the number\",\"returns\":{\"_0\":\"The current number value\"}},\"increment()\":{\"details\":\"Increments the number by 1\"},\"mulNumber(uint256)\":{\"details\":\"Multiplies the current number by a new value\",\"params\":{\"newNumber\":\"The value to multiply by\"}},\"setNumber(uint256)\":{\"details\":\"Sets the number to a new value\",\"params\":{\"newNumber\":\"The new value to set\"}}},\"title\":\"Counter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Counter.sol\":\"Counter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\":@prb/test/=node_modules/@prb/test/\",\":forge-std/=node_modules/forge-std/\"],\"viaIR\":true},\"sources\":{\"src/Counter.sol\":{\"keccak256\":\"0xce87fbd1c9a069f75874408043567244a9b6f0542d65d74eabc90f8edbdbdba9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0b4769f4e3b3e920996457cf10d4f7a055c2e306392bbc2fd2c9da56b1b116d4\",\"dweb:/ipfs/QmRGk2eXMcPccxvvDcmVufnNEZUvG5KAfjqik1SHK5v2ZR\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"payable","type":"function","name":"addFromMsgValue"},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addNumber"},{"inputs":[],"stateMutability":"view","type":"function","name":"getNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"increment"},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"mulNumber"},{"inputs":[],"stateMutability":"view","type":"function","name":"number","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"uint256","name":"newNumber","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"setNumber"}],"devdoc":{"kind":"dev","methods":{"addFromMsgValue()":{"details":"Adds the msg.value to the current number This function is payable and adds the wei sent to the number"},"addNumber(uint256)":{"details":"Adds a new value to the current number","params":{"newNumber":"The value to add"}},"getNumber()":{"details":"Returns the current value of the number","returns":{"_0":"The current number value"}},"increment()":{"details":"Increments the number by 1"},"mulNumber(uint256)":{"details":"Multiplies the current number by a new value","params":{"newNumber":"The value to multiply by"}},"setNumber(uint256)":{"details":"Sets the number to a new value","params":{"newNumber":"The new value to set"}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/","@prb/test/=node_modules/@prb/test/","forge-std/=node_modules/forge-std/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"bytecodeHash":"none"},"compilationTarget":{"src/Counter.sol":"Counter"},"evmVersion":"paris","libraries":{},"viaIR":true},"sources":{"src/Counter.sol":{"keccak256":"0xce87fbd1c9a069f75874408043567244a9b6f0542d65d74eabc90f8edbdbdba9","urls":["bzz-raw://0b4769f4e3b3e920996457cf10d4f7a055c2e306392bbc2fd2c9da56b1b116d4","dweb:/ipfs/QmRGk2eXMcPccxvvDcmVufnNEZUvG5KAfjqik1SHK5v2ZR"],"license":"MIT"}},"version":1},"id":0}